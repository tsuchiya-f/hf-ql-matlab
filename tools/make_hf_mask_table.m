function [] = make_hf_mask_table()

% output file name
file_out="HF_Table_Mask.t";

% frequency masked [kHz]
% mask_freq = [ f1 f2 f3 ... ]; 
%mask_freq = [80.0,1.0e3, 1.0e3, 3.0e3, 4.0e3, 5.0e3, 10.0e3, 20.0e3, 30.0e3, 40.0e3];
%mask_freq = [10.0e3, 20.0e3, 30.0e3, 40.0e3];
mask_freq = [];

% frequency range masked [kHz]
% mask_range = [ f1s f1e; f2s f2e; ... ]; 
mask_range = [900.0 1.1e3];

% frequency range
f_start = 80.0;     % [kHz]
f_end   = 44924.0;  % [kHz]
df      = 2.3125;   % band width [kHz]

% table size
nf = (f_end-f_start)/df;    % [bits]
n_ent = nf/8;               % [Bytes]

% init table
mask = zeros(1,n_ent);

% generate table
% frequency masked [kHz]
n_freq = numel(mask_freq);
for i=1:n_freq
    i_freq = fix((mask_freq(i)-f_start)/df)+1;
    i_ent = fix(i_freq/8)+1;
    i_bin = mod(i_freq,8);
    mask_ptn = 2^i_bin;
    mask(i_ent) = bitor(mask(i_ent), mask_ptn);
end

% frequency range masked [kHz]
n_range = numel(mask_range)/2;
for i=1:n_range
    ns = fix((mask_range(i,1)-f_start)/df)+1;
    ne = fix((mask_range(i,2)-f_start)/df)+1;
    for j = ns:ne
        i_ent = fix(j/8)+1;
        i_bin = mod(j,8);
        mask_ptn = 2^i_bin;
        mask(i_ent) = bitor(mask(i_ent), mask_ptn);
    end
end

% output table

fid = fopen(file_out,'w');

fprintf(fid, "// --------------------------------------------------\n");
fprintf(fid, "// This table is generated by make_hf_mask_table.m\n");
fprintf(fid, "//  number of entry : %d\n",n_ent);
fprintf(fid, "//  start frequeny [kHz] : %f\n",f_start);
fprintf(fid, "//  stop  frequeny [kHz] : %f\n",f_end);
fprintf(fid, "//  bandwidth [kHz]      : %d\n",df);
fprintf(fid, "// -------------------------------------------------\n");
fprintf(fid, "\n");
fprintf(fid, "const unsigned char hfTableMask[HF_TABLE_MASK_ENT] = {\n");
for i=1:n_ent
    mask_out = 255 - mask(i); 
    fprintf(fid, " 0x%02x",mask_out);
    if i ~= n_ent
        fprintf(fid, ",");        
    end
    if mod(i,16) == 0
        fprintf(fid, "\n");
    end
end
fprintf(fid, "};\n");

fclose(fid);




end


