% ----------------------------------------------------------------------------------------------
% file_in = '/Users/Shared/Linux/juice_test/20210926_PSSR1_wo_RFI_rejection/HF_20210926-1558.mat';
% make_hf_mask_table(file_in);
% ----------------------------------------------------------------------------------------------

function [] = make_hf_mask_table(file_in)

% frequency range
f_start = 80.0;     % [kHz]
f_end   = 44924.0;  % [kHz]
df      = 2.3125;   % band width [kHz]

% table size
nf = (f_end-f_start)/df;    % [bits]
n_ent = nf/8;               % [Bytes]

% Input MAT file
[~, freq_rfi] = hf_find_RFI(file_in);

% Null table
null = 0;

% frequency masked [kHz]
load(file_in);
mask_freq = freq_rfi;
n_freq = numel(mask_freq);

% mask flag
mask_flag = zeros(1,nf);
for i=1:n_freq
    i_freq = fix((mask_freq(i)-f_start)/df);
    mask_flag(i_freq) = 1;
end

% mask table (log file)
filename = 'tools\freq_mask_table.csv';
fid = fopen(filename,'w');

fprintf(fid, "# JUICE RPWI HF frequency mask table\n");
fprintf(fid, "#\n");
fprintf(fid, "# This table is generated by make_hf_mask_table.m\n");
if null == 0
    [~,name,ext] = fileparts(file_in);
    fprintf(fid, "# Soure file : %s%s\n", name, ext);    
end
fprintf(fid, "#  number of entry : %d\n",n_ent);
fprintf(fid, "#  start frequeny [kHz] : %f\n",f_start);
fprintf(fid, "#  stop  frequeny [kHz] : %f\n",f_end);
fprintf(fid, "#  bandwidth [kHz]      : %d\n",df);
fprintf(fid, "#\n");
fprintf(fid,"N,   start[kHz], stop[kHz] ,mask flag\n");
for i=1:nf
    fprintf(fid, "%3d,  %8.2f,  %8.2f, %1d\n", i, f_start+df*(i-1), f_start+df*i, mask_flag(i));
end
fclose(fid);

% output file name
file_out="C:\Users\tsuch\Documents\MATLAB\hf_ql_matlab\tools\HF_Table_Mask.t";
fprintf("%s\n",file_out);

% init table
mask = zeros(1,n_ent);

if null == 0
    % generate table
    % frequency masked [kHz]
    for i=1:n_freq
        i_freq = fix((mask_freq(i)-f_start)/df);
        i_ent = fix(i_freq/8)+1;
        i_bin = mod(i_freq,8);
        mask_ptn = 2^(7-i_bin);
        mask(i_ent) = bitor(mask(i_ent), mask_ptn);
    end

%   frequency range masked [kHz]
%   n_range = numel(mask_range)/2;
%   for i=1:n_range
%       ns = fix((mask_range(i,1)-f_start)/df)+1;
%       ne = fix((mask_range(i,2)-f_start)/df)+1;
%       for j = ns:ne
%           i_ent = fix(j/8)+1;
%           i_bin = mod(j,8);
%           mask_ptn = 2^i_bin;
%           mask(i_ent) = bitor(mask(i_ent), mask_ptn);
%       end
%   end
end

% output table

fid = fopen(file_out,'w');

fprintf(fid, "// --------------------------------------------------\n");
if null == 1
    fprintf(fid, "// Tihs is a null table \n");
else
    [~,name,ext] = fileparts(file_in);
    fprintf(fid, "// Soure file : %s%s\n", name, ext);    
end
fprintf(fid, "// --------------------------------------------------\n");
fprintf(fid, "// This table is generated by make_hf_mask_table.m\n");
fprintf(fid, "//  number of entry : %d\n",n_ent);
fprintf(fid, "//  start frequeny [kHz] : %f\n",f_start);
fprintf(fid, "//  stop  frequeny [kHz] : %f\n",f_end);
fprintf(fid, "//  bandwidth [kHz]      : %d\n",df);
fprintf(fid, "// -------------------------------------------------\n");
fprintf(fid, "\n");
fprintf(fid, "const unsigned char hfTableMask[HF_TABLE_MASK_ENT] = {\n");
for i=1:n_ent
    mask_out = 255 - mask(i); 
    fprintf(fid, " 0x%02x",mask_out);
    if i ~= n_ent
        fprintf(fid, ",");        
    end
    if mod(i,16) == 0
        fprintf(fid, "\n");
    end
end
fprintf(fid, "};\n");

fclose(fid);




end


